'use strict';

/* Controllers */

function ItemController(key) {
	return	function($scope, canvasService) {
	  	 $scope.showInput = false;
	 
		 $scope.getItems = function(){
			 return canvasService.getItems(key);
		 };
	 
		 $scope.addItem = function(text){
			 canvasService.addItem(key,text);
			 $scope.text = ''
		 };
	 
		 $scope.deleteItem = function(idx){
			 canvasService.deleteItem(key, idx);
		 };
  	 
	  }
	
};


angular.module('quickcanvas.controllers', []).
	controller('NavCtrl', ['$scope', '$route', '$location', 'canvasService', function($scope,$route,$location, canvasService){
		  $scope.$on('$routeChangeSuccess', function() {
			  $scope.currentPath = $location.path();
			//If this doesn't work, console.log $route.current to see how it's formatted
		  });
		  
		  var drawPdf = function(){ 
							var doc = new jsPDF('l','mm','a4');
							var top = 15;
							var left  = 13.5;
							var width = 270;
							var half = 130;
							var height = 180;
							var margin=5;
							var lineHeight = 8;
							doc.setDrawColor(0);
							//canvas border
							doc.rect(left,top,width,height,'stroke');
							
							// first row columns
							doc.lines([[0,half-top]],left+(width/5)*2,top);
							doc.lines([[0,half-top]],left+(width/5)*3,top);
							doc.lines([[0,half-top]],left+(width/5)*4,top);
							doc.lines([[0,half-top]],left+width/5,top);
							
							// first row labels
							
							doc.setFontSize(12);
							doc.text('Problem', left + margin/2, top + margin);
							// line under label row
							doc.lines([[width, 0]], left, lineHeight + top )
							
							var pl = doc.splitTextToSize(canvasService.getLines('problems'), width/5);
							doc.text(left + margin/2 , top + margin + lineHeight, pl);


							doc.text('Solution', left + margin/2 + (width/5), top + margin);

							var sl = doc.splitTextToSize(canvasService.getLines('solutions'), width/5-margin);
							doc.text(left + margin/2 + (width/5), top + margin + lineHeight, sl);
							
							
							doc.text('Key Metrics', left + margin/2 + (width/5),(top + half) /2.0 + margin);

							var kl = doc.splitTextToSize(canvasService.getLines('key_metrics'), width/5-margin);
							doc.text(left + margin/2 + (width/5), (top + half)/2.0 + margin+ lineHeight, kl);


							doc.text('Unique value proposition', left + margin/2 + 2*(width/5), top + margin);
							
							var uvl = doc.splitTextToSize(canvasService.getLines('unique_value'), width/5-margin);
							doc.text(left + margin/2 + 2*(width/5), top + margin+ lineHeight, uvl);
							
							
							doc.text('Unfair advantage', left + margin/2 + 3*(width/5), top + margin);
							var ufl = doc.splitTextToSize(canvasService.getLines('unfair_advantage'), width/5-margin);
							doc.text(left + margin/2 + 3*(width/5), top + margin+ lineHeight, ufl);

							doc.text('Channels', left + margin/2 + 3*(width/5),(top + half) /2.0 + margin);
							var chl = doc.splitTextToSize(canvasService.getLines('channels'), width/5-margin);
							doc.text( left + margin/2 + 3*(width/5),(top + half) /2.0 + margin + lineHeight, chl);

							doc.text('Customer segment', left + margin/2 + 4*(width/5), top + margin);
							var csl = doc.splitTextToSize(canvasService.getLines('customer_segments'), width/5);
							doc.text( left + margin/2 + 4*(width/5), top + margin + lineHeight, csl);


							// first row middle lines
							doc.lines([[width/5, 0]], left + width/5.0, (top + half) /2.0 )
							doc.lines([[width/5, 0]], left + width/5.0, lineHeight + (top + half) /2.0 )

							doc.lines([[width/5, 0]], left + 3*(width/5.0), (top + half) /2.0 )
							doc.lines([[width/5, 0]], left + 3*(width/5.0), lineHeight + (top + half) /2.0 )

							// middle horizontal lines
							doc.lines([[width,0]],left,half);
							doc.lines([[width,0]],left,lineHeight + half);
							
							// second row column
							doc.lines([[0,height-half-1+top]],left + (width/2.0), half);
							// second row labels
							
							doc.text('Cost structure', left + margin/2 , half + margin);
					
							var cssl = doc.splitTextToSize(canvasService.getLines('cost_structure'), (width/2.0)-margin);
							doc.text( left + margin/2, half + margin+ lineHeight, cssl);
					
					
							doc.text('Revenue streams', left +(width/2.0)+ margin/2 , half + margin);
					
							var rsl = doc.splitTextToSize(canvasService.getLines('revenue_streams'), (width/2.0)-margin);
							doc.text( left +(width/2.0)+ margin/2 , half + margin+ lineHeight, rsl);
	
							// var problems=$scope.problems;
			
							// var lines = doc.splitTextToSize(problems, (width/2.0)-margin);
							// doc.text(left + margin/2, top + margin+lineHeight, problems);
	
							doc.text ( "Lean Canvas", left , top-5)	
							doc.text ( "Generated by QuickCanvas.io", left , top + height + 5)
							return doc.output();
	
			};

		$scope.showExport = function(){
			$scope.downloadMessage = '';
			// $scope.problems = canvasService.getLines('problems');

			$('#downloadModal').modal('show');
			Downloadify.create('downloadify',{
						filename: 'LeanCanvas.pdf',
						data: drawPdf,
						onComplete: function(){ $('#downloadModal').modal('hide');},
						onCancel: function(){ $('#downloadModal').modal('hide'); },
						onError: function(){ $('#downloadModal').modal('hide');},
						swf: 'img/downloadify.swf',
						downloadImage: 'img/download.png',
						width: 100,
						height: 30,
						transparent: true,
						append: false
					});			// alert('Export ' + canvasService.getJson()); 
		};
		
		$scope.showHelp = function(){
			alert('Show help');
		};
	
	}])
  .controller('CanvasCtrl', [function(){

  }])
  .controller('AboutCtrl', [function() {

  }])
  .controller('ContactCtrl', [function() {

  }])
  .controller('ProblemCtrl', ['$scope', 'canvasService', ItemController('problems') ])
  .controller('SolutionCtrl', ['$scope', 'canvasService', ItemController('solutions') ])
  .controller('KeyMetricCtrl', ['$scope', 'canvasService', ItemController('key_metrics') ])	  
  .controller('UniqueValueCtrl', ['$scope', 'canvasService', ItemController('unique_value') ])	  
  .controller('UnfairAdvCtrl', ['$scope', 'canvasService', ItemController('unfair_advantage') ])
  .controller('ChannelCtrl', ['$scope', 'canvasService', ItemController('channels') ])
  .controller('CustomerSegmCtrl', ['$scope', 'canvasService', ItemController('customer_segments') ])
  .controller('ChannelCtrl', ['$scope', 'canvasService', ItemController('channels') ])
  .controller('CostStructCtrl', ['$scope', 'canvasService', ItemController('cost_structure') ])
  .controller('RevenueStreamCtrl', [ '$scope', 'canvasService', ItemController('revenue_streams')]);
  